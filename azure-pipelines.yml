# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service


trigger:
- feature


resources:
- repo: self

variables:
  #Repo Named
  repoName: 'webfrontend'  

  # ACR Registry ADO Service Connections
  containerRegistryDev: 'sc-acrdev145243252'
  containerRegistryStage: 'sc-acrstage145243252'
  containerRegistryProd: 'sc-acrprod145243252'
  dockerfilePath: '**/Dockerfile'

  acrdevurl: 'acrdev145243252.azurecr.io'
  acrstageurl: 'acrstage145243252.azurecr.io'
  acrprodurl: 'acrprod145243252.azurecr.io'

  imagePullSecretDev: 'acrdev145243252-auth'
  imagePullSecretStage: 'acrstage145243252-auth'
  imagePullSecretProd: 'acrprod145243252-auth'

  #kubernetes ADO Environments
  envdev: 'env-aks-dev.default'
  envstage: 'env-aks-staging.default'
  envprod: 'env-aks-prod.default'
 
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: CI
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool: 
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build Container Image
      inputs:
        command: build
        repository: $(repoName)
        dockerfile: $(dockerfilePath)
        tags: $(tag)

    - task: Docker@2
      displayName: Save Image in CI
      inputs:
        repository: $(repoName)
        command: save
        arguments: '--output $(Pipeline.Workspace)/$(repoName).image.tar $(repoName):$(tag)'
        addPipelineData: false


    - task: PublishPipelineArtifact@1
      displayName: Publish Image Artifact
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'ContainerImage'
        publishLocation: 'pipeline'
      
    - task: HelmInstaller@0
      displayName: Install Helm
      inputs:
        helmVersion: '3.11.0'
        installKubectl: true
        kubectlVersion: '1.26.1'
    



- stage: CDDEV
  displayName: CD for Dev Env
  dependsOn: CI

  jobs:
  - deployment: Deploy
    displayName: Deploy to Dev Environment
    variables:
    - name: acr-url
      value: $(acrdevurl)
    - name: image-name
      value: $(repoName)
    pool: 
      vmImage: $(vmImageName)
    environment: $(envdev)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Load Image from CI
            inputs:
              command: load
              arguments: '--input $(Pipeline.Workspace)/ContainerImage/$(repoName).image.tar'
            
          - task: Docker@2
            displayName: ReTag Image with ACR Name - BuildId
            inputs:
              containerRegistry: '$(containerRegistryDev)'
              repository: '$(repoName)'
              command: tag
              arguments: '$(repoName):$(tag)  $(acrdevurl)/$(repoName):$(tag)'


          - task: Docker@2
            displayName: Push Image to Dev ACR
            inputs:
              containerRegistry: $(containerRegistryDev)
              repository: $(repoName)
              command: push
              tags: $(tag)
          
          - task: KubernetesManifest@0
            inputs:
              action: createSecret
              namespace: default
              secretType: dockerRegistry
              secretName: $(imagePullSecretDev)
              dockerRegistryEndpoint: $(containerRegistryDev)
            
          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'ME-MngEnvMCAP011532-ppenumatsa-1(b6113872-8e9a-4443-bd4d-4295049e3294)'
              azureResourceGroup: 'rg-ingenio'
              kubernetesCluster: 'aks-dev-145243252'
              namespace: 'default'
              command: 'ls'
              


