# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service


trigger:
- feature


resources:
- repo: self

variables:
  #Repo Named
  repoName: 'mywebapp'  

  # Azure resoruces
  azureSubscription: 'ME-MngEnvMCAP011532-ppenumatsa-1(b6113872-8e9a-4443-bd4d-4295049e3294)'
  azureResourceGroup: 'rg-ingenio'
  kubernetesDevCluster: 'aks-dev-558950328'
  kubernetesStageCluster: 'aks-staging-558950328'
  kubernetesProdCluster: 'aks-prod-558950328'

  # Container Registries
  containerRegistryDev: 'sc-acrdev558950328'
  containerRegistryProd: 'sc-acrprod558950328'
  containerRegistryStage: 'sc-acrstage558950328'
  dockerfilePath: '**/Dockerfile'

  acrdevurl: 'acrdev558950328.azurecr.io'
  acrstageurl: 'acrstage558950328.azurecr.io'
  acrprodurl: 'acrprod558950328.azurecr.io'

  imagePullSecretDev: 'acrdev558950328-auth'
  imagePullSecretStage: 'acrstage558950328-auth'
  imagePullSecretProd: 'acrprod558950328-auth'


  #kubernetes ADO Environments


  envdev: 'env-aks-dev'
  envstage: 'env-aks-stage'
  envprod: 'env-aks-prod'
 
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: CI
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool: 
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build Container Image
      inputs:
        command: build
        repository: $(repoName)
        dockerfile: $(dockerfilePath)
        tags: $(tag)

    - task: Docker@2
      displayName: Save Image in CI
      inputs:
        repository: $(repoName)
        command: save
        arguments: '--output $(Pipeline.Workspace)/$(repoName).image.tar $(repoName):$(tag)'
        addPipelineData: false


    - task: PublishPipelineArtifact@1
      displayName: Publish Image Artifact
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'ContainerImage'
        publishLocation: 'pipeline'
      
    - task: HelmInstaller@0
      displayName: Install Helm
      inputs:
        helmVersion: '3.11.0'
        installKubectl: true
        kubectlVersion: '1.26.1'
    



- stage: CDDEV
  displayName: CD for Dev Env
  dependsOn: CI

  jobs:
  - deployment: Deploy
    displayName: Deploy to Dev Environment
    variables:
    - name: acr-url
      value: $(acrdevurl)
    - name: image-name
      value: $(repoName)
    pool: 
      vmImage: $(vmImageName)
    environment: $(envdev)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Load Image from CI
            inputs:
              command: load
              arguments: '--input $(Pipeline.Workspace)/ContainerImage/$(repoName).image.tar'
            
          - task: Docker@2
            displayName: ReTag Image with ACR Name - BuildId
            inputs:
              containerRegistry: '$(containerRegistryDev)'
              repository: '$(repoName)'
              command: tag
              arguments: '$(repoName):$(tag)  $(acrdevurl)/$(repoName):$(tag)'


          - task: Docker@2
            displayName: Push Image to Dev ACR
            inputs:
              containerRegistry: $(containerRegistryDev)
              repository: $(repoName)
              command: push
              tags: $(tag)
          
          - task: KubernetesManifest@0
            displayName: Create Secret 
            inputs:
              action: createSecret
              kubernetesServiceConnection: $(kubernetesDevCluster)
              namespace: default
              secretType: dockerRegistry
              secretName: $(imagePullSecretDev)
              dockerRegistryEndpoint: $(containerRegistryDev)

        
          - task: HelmDeploy@0
            displayName: Deploy to Dev Cluster
            timeoutInMinutes: 2
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: $(azureSubscription)
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesDevCluster)
              namespace: 'default'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/ContainerImage/s/mywebapp/'
              chartVersion: 'v1'
              releaseName: 'mywebapp'
              #overrideValues: |
              #  image.tag=$(tag) 
              #  image.pullSecret=$(containerRegistryDev)
              valueFile: '$(Pipeline.Workspace)/ContainerImage/s/mywebapp/values_dev.yaml'
              arguments: 
                --set image.tag=$(tag)
                --set image.pullSecret=$(imagePullSecretDev)

          - task: HelmDeploy@0
            displayName: Rollback failures
            condition: failed()
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: $(azureSubscription)
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesDevCluster)
              namespace: 'default'
              command: 'rollback'
              releaseName: 'mywebapp'
              arguments: --wait


- stage: CDStage
  displayName: CD for Stage Env
  dependsOn: CDDEV
  condition: succeeded('CDDEV')

  jobs:
  - deployment: Deploy
    displayName: Deploy to Stage Environment
    variables:
    - name: acr-url
      value: $(acrstageurl)
    - name: image-name
      value: $(repoName)
    pool: 
      vmImage: $(vmImageName)
    environment: $(envstage)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Load Image from CI
            inputs:
              command: load
              arguments: '--input $(Pipeline.Workspace)/ContainerImage/$(repoName).image.tar'
            
          - task: Docker@2
            displayName: ReTag Image with ACR Name - BuildId
            inputs:
              containerRegistry: '$(containerRegistryStage)'
              repository: '$(repoName)'
              command: tag
              arguments: '$(repoName):$(tag)  $(acrstageurl)/$(repoName):$(tag)'


          - task: Docker@2
            displayName: Push Image to Stage ACR
            inputs:
              containerRegistry: $(containerRegistryStage)
              repository: $(repoName)
              command: push
              tags: $(tag)
          
          - task: KubernetesManifest@0
            inputs:
              action: createSecret
              kubernetesServiceConnection: $(kubernetesStageCluster)
              namespace: default
              secretType: dockerRegistry
              secretName: $(imagePullSecretStage)
              dockerRegistryEndpoint: $(containerRegistryStage)

        
          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: $(azureSubscription)
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesStageCluster)
              namespace: 'default'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/ContainerImage/s/mywebapp/'
              chartVersion: 'v1'
              releaseName: 'mywebapp'
              valueFile: '$(Pipeline.Workspace)/ContainerImage/s/mywebapp/values_stage.yaml'
              arguments: 
                --set image.tag=$(tag)
                --set image.pullSecret=$(imagePullSecretStage)


- stage: CDProd
  displayName: CD for Prod Env
  dependsOn: CDStage
  condition: succeeded('CDStage')

  jobs:
  - deployment: Deploy
    displayName: Deploy to Production Environment
    variables:
    - name: acr-url
      value: $(acrprodurl)
    - name: image-name
      value: $(repoName)
    pool: 
      vmImage: $(vmImageName)
    environment: $(envprod)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Docker@2
            displayName: Load Image from CI
            inputs:
              command: load
              arguments: '--input $(Pipeline.Workspace)/ContainerImage/$(repoName).image.tar'
            
          - task: Docker@2
            displayName: ReTag Image with ACR Name - BuildId
            inputs:
              containerRegistry: '$(containerRegistryProd)'
              repository: '$(repoName)'
              command: tag
              arguments: '$(repoName):$(tag)  $(acrprodurl)/$(repoName):$(tag)'


          - task: Docker@2
            displayName: Push Image to Prod ACR
            inputs:
              containerRegistry: $(containerRegistryProd)
              repository: $(repoName)
              command: push
              tags: $(tag)
          
          - task: KubernetesManifest@0
            inputs:
              action: createSecret
              kubernetesServiceConnection: $(kubernetesProdCluster)
              namespace: default
              secretType: dockerRegistry
              secretName: $(imagePullSecretProd)
              dockerRegistryEndpoint: $(containerRegistryProd)

        
          - task: HelmDeploy@0
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: $(azureSubscription)
              azureResourceGroup: $(azureResourceGroup)
              kubernetesCluster: $(kubernetesProdCluster)
              namespace: 'default'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/ContainerImage/s/mywebapp/'
              chartVersion: 'v1'
              releaseName: 'mywebapp'
              valueFile: '$(Pipeline.Workspace)/ContainerImage/s/mywebapp/values_prod.yaml'
              arguments: 
                --set image.tag=$(tag)
                --set image.pullSecret=$(imagePullSecretProd)

                  
        


